name: Persistent Ubuntu VPS (5h30 Auto-Restart)

on:
  workflow_dispatch:

jobs:
  vps:
    runs-on: ubuntu-latest
    timeout-minutes: 335

    steps:
      - name: üß± Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: üìÅ Prepare vm_data folder
        run: |
          echo "üìÅ Preparing vm_data folder..."
          mkdir -p "$GITHUB_WORKSPACE/vm_data"
          echo "‚úÖ vm_data ready."

      - name: üîÅ Restore previous VM data
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üîÅ Restoring vm_data..."
          cd "$GITHUB_WORKSPACE/vm_data"
          rm -rf ./*
          git clone --branch vm-data https://$PAT_TOKEN@github.com/${{ github.repository }} . \
            || echo "‚ö†Ô∏è No vm-data branch found ‚Äî starting fresh."
          echo "‚úÖ Data restored."

      - name: üåê Start SSHX
        run: |
          echo "‚öôÔ∏è Starting SSHX..."
          cd "$GITHUB_WORKSPACE/vm_data"
          nohup bash -c "curl -sSf https://sshx.io/get | sh -s run > sshx_link.txt 2>&1" &
          sleep 8
          echo "üåê SSHX Link:"
          grep -Eo 'https://sshx.io/[^ ]+' sshx_link.txt || echo "‚ùå SSHX link not found"
          echo "‚úÖ SSHX running."

      - name: ‚öôÔ∏è Restore Pterodactyl + Wings files
        run: |
          echo "üì¶ Restoring Pterodactyl + Wings from vm_data..."
          if [ -d "$GITHUB_WORKSPACE/vm_data/panel" ]; then
            sudo mkdir -p /var/www/pterodactyl
            sudo cp -r "$GITHUB_WORKSPACE/vm_data/panel/." /var/www/pterodactyl/ || true
            echo "‚úÖ Panel files restored."
          fi
          if [ -d "$GITHUB_WORKSPACE/vm_data/wings" ]; then
            sudo mkdir -p /etc/pterodactyl
            sudo cp -r "$GITHUB_WORKSPACE/vm_data/wings/." /etc/pterodactyl/ || true
            echo "‚úÖ Wings files restored."
          fi

      - name: üß© Create Nginx Config (if missing) ‚Äî safe heredoc
        run: |
          if [ ! -f "/etc/nginx/sites-available/pterodactyl.conf" ]; then
            echo "üåê Creating Nginx configuration..."
            sudo apt-get update -y
            sudo apt-get install -y nginx php8.2-fpm php8.2-cli php8.2-mbstring php8.2-bcmath php8.2-json php8.2-mysql php8.2-gd php8.2-curl php8.2-xml composer mariadb-server

            # Use sudo tee with an EOF that has escaped $ signs to avoid YAML/heredoc parsing issues
            sudo bash -c 'cat > /etc/nginx/sites-available/pterodactyl.conf <<'"'"'NGINX_EOF'"'"'
server {
    listen 80;
    server_name _;
    root /var/www/pterodactyl/public;
    index index.php;

    access_log /var/log/nginx/pterodactyl.access.log;
    error_log /var/log/nginx/pterodactyl.error.log;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location ~ \.php\$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php8.2-fpm.sock;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ /\.ht {
        deny all;
    }
}
NGINX_EOF'

            sudo ln -sf /etc/nginx/sites-available/pterodactyl.conf /etc/nginx/sites-enabled/pterodactyl.conf
            sudo systemctl restart nginx php8.2-fpm || true
            echo "‚úÖ Nginx configuration created and loaded."
          else
            echo "‚úÖ Nginx config already exists ‚Äî skipping."
          fi

      - name: üöÄ Start Pterodactyl Panel + Wings (if installed)
        run: |
          if [ -d "/var/www/pterodactyl" ] && [ -f "/var/www/pterodactyl/artisan" ]; then
            echo "üñ•Ô∏è Starting Pterodactyl Panel (port 80)..."
            sudo chown -R www-data:www-data /var/www/pterodactyl
            sudo chmod -R 755 /var/www/pterodactyl
            sudo systemctl start nginx php8.2-fpm mariadb || true
            echo "‚úÖ Panel services started."
          else
            echo "‚ö†Ô∏è Panel not found, skipping startup."
          fi

          if command -v wings >/dev/null 2>&1; then
            echo "ü™Ω Starting Pterodactyl Wings..."
            sudo systemctl start wings || nohup sudo wings > /etc/pterodactyl/wings.log 2>&1 &
            echo "‚úÖ Wings started."
          else
            echo "‚ö†Ô∏è Wings not found, skipping startup."
          fi

      - name: üíæ Start 10-sec autosave
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üíæ Starting autosave (every 10 seconds)..."
          cd "$GITHUB_WORKSPACE/vm_data"
          nohup bash -c "while true; do
            echo 'üïê Backing up /var/www/pterodactyl and /etc/pterodactyl...'
            rm -rf panel wings
            mkdir -p panel wings
            sudo cp -r /var/www/pterodactyl/. panel/ 2>/dev/null || true
            sudo cp -r /etc/pterodactyl/. wings/ 2>/dev/null || true

            git init -q
            git config user.email 'actions@github.com'
            git config user.name 'github-actions'
            git add --all
            git commit -m \"üïê Autosave at \$(date '+%H:%M:%S')\" -q || true
            git branch -M vm-data
            git push -f https://$PAT_TOKEN@github.com/${{ github.repository }} vm-data >/dev/null 2>&1 || true
            echo \"[\$(date '+%H:%M:%S')] ‚úÖ Saved\" >> status.log
            sleep 10
          done" &
          echo "‚úÖ Autosave running."

      - name: ‚è≥ Keep VPS alive (5h30m)
        run: |
          echo "‚è≥ VPS running for 5h30m..."
          sleep 19800

      - name: üíæ Final Save + Restart
        if: always()
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          WORKFLOW_FILE: main.yml
          RESTART_REF: main
        run: |
          echo "üì¶ Final backup..."
          cd "$GITHUB_WORKSPACE/vm_data"
          rm -rf panel wings
          mkdir -p panel wings
          sudo cp -r /var/www/pterodactyl/. panel/ 2>/dev/null || true
          sudo cp -r /etc/pterodactyl/. wings/ 2>/dev/null || true

          git init -q
          git config user.email 'actions@github.com'
          git config user.name 'github-actions'
          git add --all
          git commit -m \"üíæ Final save \$(date '+%H:%M:%S')\" -q || true
          git branch -M vm-data
          git push -f https://$PAT_TOKEN@github.com/${{ github.repository }} vm-data || true

          echo "‚ôªÔ∏è Restarting workflow..."
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $PAT_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$WORKFLOW_FILE/dispatches" \
            -d "{\"ref\":\"$RESTART_REF\"}"
          echo "‚úÖ Restart triggered."
