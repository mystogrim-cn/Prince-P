name: Persistent Ubuntu VPS (Pterodactyl Panel + Wings Auto-Restart)

on:
  workflow_dispatch:

jobs:
  vps:
    runs-on: ubuntu-latest
    timeout-minutes: 330

    steps:
      - name: üß± Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: üîÅ Restore vm_data from vm-data branch
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üîÅ Restoring vm_data from vm-data branch..."
          rm -rf "$GITHUB_WORKSPACE/vm_data"
          mkdir -p "$GITHUB_WORKSPACE/vm_data"
          cd "$GITHUB_WORKSPACE/vm_data"
          git clone --branch vm-data "https://$PAT_TOKEN@github.com/${{ github.repository }}" . \
            || echo "‚ö†Ô∏è vm-data branch not found ‚Äî starting fresh."
          echo "‚úÖ vm_data restored (if present)."

      - name: üß© Restore Pterodactyl Panel + Wings
        run: |
          echo "‚ôªÔ∏è Restoring panel and wings from vm_data..."
          if [ -d "$GITHUB_WORKSPACE/vm_data/panel" ]; then
            sudo mkdir -p /var/www/pterodactyl
            sudo rsync -a "$GITHUB_WORKSPACE/vm_data/panel/" /var/www/pterodactyl/
            echo "‚úÖ Restored /var/www/pterodactyl"
          fi

          if [ -d "$GITHUB_WORKSPACE/vm_data/wings" ]; then
            sudo mkdir -p /etc/pterodactyl
            sudo rsync -a "$GITHUB_WORKSPACE/vm_data/wings/" /etc/pterodactyl/
            echo "‚úÖ Restored /etc/pterodactyl"
          fi

      - name: ‚öôÔ∏è Install required packages (git/rsync/sshx deps)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git rsync curl unzip sudo

      - name: ‚öôÔ∏è Start SSHX (for remote access)
        run: |
          echo "‚öôÔ∏è Starting SSHX..."
          cd "$GITHUB_WORKSPACE/vm_data"
          nohup bash -c "curl -sSf https://sshx.io/get | sh -s run > sshx_link.txt 2>&1" &
          sleep 6
          echo "üåê SSHX Link (if available):"
          grep -Eo 'https://sshx.io/[^ ]+' sshx_link.txt || echo "‚ùå SSHX link not found yet"
          echo "‚úÖ SSHX started (background)."

      - name: üß± Check and Start Pterodactyl Panel + Wings
        run: |
          echo "üîç Checking for Pterodactyl installation..."

          # === Start panel ===
          if [ -d "/var/www/pterodactyl" ]; then
            echo "‚úÖ Panel found ‚Äî starting..."
            cd /var/www/pterodactyl || exit

            # Start PHP and web server if not running
            sudo systemctl start nginx || true
            sudo systemctl start php8.2-fpm || sudo systemctl start php8.1-fpm || true

            # Fallback: run artisan serve if no webserver
            if ! ss -ltnp 2>/dev/null | grep -q ":80"; then
              nohup php artisan serve --host=0.0.0.0 --port=80 > "$GITHUB_WORKSPACE/vm_data/panel_stdout.log" 2>&1 &
              echo "üåê Panel started on port 80."
            else
              echo "‚ÑπÔ∏è Port 80 busy ‚Äî artisan serve skipped."
            fi
          else
            echo "‚ö†Ô∏è Panel not found ‚Äî skipping."
          fi

          # === Start Wings ===
          if [ -f "/etc/pterodactyl/config.yml" ]; then
            echo "‚úÖ Wings config found ‚Äî starting..."
            sudo systemctl daemon-reexec || true
            sudo systemctl start docker || true

            if systemctl list-units --type=service | grep -q "wings"; then
              sudo systemctl restart wings || sudo systemctl start wings || true
              echo "‚úÖ Wings service started."
            else
              if command -v wings >/dev/null 2>&1; then
                nohup sudo wings --config /etc/pterodactyl/config.yml > "$GITHUB_WORKSPACE/vm_data/wings.log" 2>&1 &
                echo "‚úÖ Wings binary started (background)."
              else
                echo "‚ö†Ô∏è Wings binary not found ‚Äî skipping."
              fi
            fi
          else
            echo "‚ö†Ô∏è Wings not configured ‚Äî skipping."
          fi

      - name: üîÅ Auto-backup Panel + Wings every 10s
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "üíæ Starting autosave loop (panel + wings)..."
          cd "$GITHUB_WORKSPACE"
          nohup bash -c "while true; do
            echo \"[ \$(date '+%F %T') ] üîÅ Creating fresh backup...\"

            # Clean old backups
            rm -rf vm_data/panel vm_data/wings
            mkdir -p vm_data/panel vm_data/wings

            # Backup panel + wings
            sudo rsync -a --delete /var/www/pterodactyl/ vm_data/panel/ || true
            sudo rsync -a --delete /etc/pterodactyl/ vm_data/wings/ || true

            # Push to vm-data branch
            cd vm_data
            if [ ! -d .git ]; then
              git init -q
              git remote add origin https://$PAT_TOKEN@github.com/${{ github.repository }}
            fi
            git config user.email 'actions@github.com'
            git config user.name 'github-actions'
            git add --all
            git commit -m \"üíæ Backup (panel+wings) at \$(date '+%F %T')\" -q || true
            git branch -M vm-data || true
            git push -f https://$PAT_TOKEN@github.com/${{ github.repository }} vm-data >/dev/null 2>&1 || true

            echo \"‚úÖ Backup done at \$(date '+%T')\"
            sleep 10
          done" > "$GITHUB_WORKSPACE/vm_data/autosave.log" 2>&1 &

          echo "‚úÖ Backup loop started (logs -> vm_data/autosave.log)."

      - name: ‚è≥ Keep VPS alive
        run: |
          echo "‚è≥ VPS running (sleep until timeout)..."
          sleep 19800

      - name: üíæ Final Save + Auto Restart
        if: always()
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          WORKFLOW_FILE: vps.yml
          RESTART_REF: main
        run: |
          echo "üì¶ Final backup before shutdown..."
          cd "$GITHUB_WORKSPACE"

          # Final backups
          rm -rf vm_data/panel vm_data/wings
          sudo rsync -a /var/www/pterodactyl/ vm_data/panel/ || true
          sudo rsync -a /etc/pterodactyl/ vm_data/wings/ || true

          cd vm_data
          if [ ! -d .git ]; then
            git init -q
            git remote add origin https://$PAT_TOKEN@github.com/${{ github.repository }}
          fi
          git config user.email 'actions@github.com'
          git config user.name 'github-actions'
          git add --all
          git commit -m "üíæ Final backup before restart $(date '+%F %T')" -q || true
          git branch -M vm-data || true
          git push -f https://$PAT_TOKEN@github.com/${{ github.repository }} vm-data || true

          echo "‚úÖ Final backup pushed."

          # Auto-restart
          echo "‚ôªÔ∏è Triggering workflow restart..."
          curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $PAT_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$WORKFLOW_FILE/dispatches" \
            -d "{\"ref\":\"$RESTART_REF\"}" || true
          echo "‚úÖ Restart requested."
